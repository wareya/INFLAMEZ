[gd_scene load_steps=17 format=2]

[ext_resource path="res://Sprites/punk rocker.png" type="Texture" id=1]
[ext_resource path="res://Sprites/punk rocker flame.png" type="Texture" id=2]
[ext_resource path="res://Sprites/light.png" type="Texture" id=3]
[ext_resource path="res://Objects/FlameParticles.tscn" type="PackedScene" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

func _ready():
    pass

const topspeed = 75.0
const jumpspeed = 190.0
const gravity = 500.0
const bad_slope_limit = 0.7 # not a normal

var walk_state = 0
var look_direction = 1

var velocity : Vector2 = Vector2(0, 0)

var want_to_jump = false

const max_fire = 120.0
var fire = max_fire
var max_life = 15.0
var life = max_life

const walljump_consumed_fire = 5.0
const walljump_timer_max = 1
const second_walljump_timer_max = 0.7
var second_walljump_timer = 0
var walljump_timer = 0
var walljumping_enabled = true
var walljump_xvel = 0 # dynamic
var last_walljump_dir = 0

func get_which_wall_collided():
    for i in range(get_slide_count()):
        var collision = get_slide_collision(i)
        if collision.normal.x > 0.9:
            return 1
        elif collision.normal.x < -0.9:
            return -1
    return 0

var was_on_ground_last_frame = false

var in_water = false

const damage_cooldown_max = 0.5
var damage_cooldown = 0
const movement_damage_cooldown_max = 0.5
var movement_damage_cooldown = 0
var num_damage_bodies_in = 0

func _physics_process(delta):
    if Input.is_action_just_pressed(\"restart\") and life <= 0:
        Manager.reload_level()
        life = max_life
        fire = max_fire
        Manager.play_oneshot_sound_effect_screenlocal(\"respawn\")
        pass
    
    $Camera/Fire.visible = Manager.simulate
    if Manager.simulate == false:
        return
    var previous_walk_state = walk_state
    if Input.is_action_pressed(\"ui_left\") and !Input.is_action_pressed(\"ui_right\"):
        walk_state = -1
    if !Input.is_action_pressed(\"ui_left\") and Input.is_action_pressed(\"ui_right\"):
        walk_state = 1
        
    if Input.is_action_just_pressed(\"ui_left\"):
        walk_state = -1
        walljump_timer = 0
    if Input.is_action_just_pressed(\"ui_right\"):
        walk_state = 1
        walljump_timer = 0
    
    if !Input.is_action_pressed(\"ui_left\") and !Input.is_action_pressed(\"ui_right\"):
        walk_state = 0
    
    if walk_state != 0:
        look_direction = walk_state
    
    if movement_damage_cooldown > 0:
        walk_state = 0
    
    $PlayerSprite.transform.x.x = look_direction
    
    var just_jumped = false
    
    if movement_damage_cooldown <= 0:
        if walljump_timer <= 0:
            velocity.x = walk_state * topspeed
            if is_on_wall():
                velocity.x *= 0.1
        if walljump_timer > 0:
            var derp = walljump_timer/walljump_timer_max
            derp = derp*derp
            velocity.x = lerp(walljump_xvel, walk_state * topspeed, 1-derp)
            walljump_timer -= delta
        
        if Input.is_action_just_pressed(\"jump\"):
            walljump_timer = 0
            want_to_jump = true
        if !Input.is_action_pressed(\"jump\"):
            walljump_timer = 0
            want_to_jump = false
    elif walljump_timer > 0:
        walljump_timer -= delta
    
    if second_walljump_timer > 0:
        second_walljump_timer -= delta
    
    if want_to_jump and (is_on_floor() or was_on_ground_last_frame):
        velocity.y = -jumpspeed
        want_to_jump = false
        just_jumped = true
        Manager.play_oneshot_sound_effect_screenlocal(\"jump\")
    
    if walljumping_enabled and want_to_jump and is_on_wall():
        var walldir = get_which_wall_collided()
        if walldir != 0 and (last_walljump_dir != walldir or second_walljump_timer <= 0):
            last_walljump_dir = walldir
            velocity.y = -jumpspeed*0.8
            velocity.x = topspeed*walldir
            walljump_xvel = velocity.x
            walljump_timer = walljump_timer_max
            second_walljump_timer = second_walljump_timer_max
            want_to_jump = false
            just_jumped = true
            fire -= walljump_consumed_fire
            Manager.play_oneshot_sound_effect_screenlocal(\"jump\")
    
    if Input.is_action_just_released(\"jump\") and velocity.y < 0:
        velocity.y /= 2
    
    if is_on_floor() and walk_state == 0 and previous_walk_state != 0 and velocity.y < 0 and !just_jumped:
        velocity.y = 0
    
    for torch in get_tree().get_nodes_in_group(\"StandTorch\"):
        if torch.overlaps_body(self):
            var played_sound = false
            if fire > 0:
                if !torch.lit:
                    played_sound = true
                    Manager.play_oneshot_sound_effect(\"torchlight\", global_position)
                torch.lit = true
            if torch.lit:
                if fire <= 0:
                    Manager.play_oneshot_sound_effect(\"torchlight\", global_position)
                fire = max_fire
    
    if fire > 0:
        for exit in get_tree().get_nodes_in_group(\"Exit\"):
            if exit.overlaps_body(self):
                Manager.change_level(exit.target)
                velocity.x = 0
                if is_on_floor():
                    $PlayerSprite/Anim.current_animation = \"stand\"
                else:
                    $PlayerSprite/Anim.current_animation = \"jump\"
                return
    
    was_on_ground_last_frame = is_on_floor()
    
    velocity.y += gravity*delta/2
    
    if in_water:
        velocity.x *= pow(0.95, delta*120)
        if velocity.y > 0:
            velocity.y *= pow(0.95, delta*120)
        else:
            velocity.y *= pow(0.975, delta*120)
    
    var do_floor_snap = true
    var floor_snap = Vector2(0, min(4, abs(velocity.x)*delta))
    if velocity.y < -50 or just_jumped:
        floor_snap = Vector2(0, 0)
    do_floor_snap = floor_snap.y > 0
    do_floor_snap = false
    
    var old_velocity_y = velocity.y
    var old_is_on_floor = is_on_floor()
    
    #if do_floor_snap:
    velocity = move_and_slide_with_snap(velocity, floor_snap, Vector2(0, -1), true)
    #else:
    #    velocity = move_and_slide(velocity, Vector2(0, -1), true)
    if velocity.y < old_velocity_y and !is_on_floor() and velocity.y < -bad_slope_limit and old_velocity_y >= -bad_slope_limit:
        velocity.y = -bad_slope_limit
    
    velocity.y += gravity*delta/2
    
    if old_velocity_y > 50 and !old_is_on_floor and is_on_floor():
        Manager.play_oneshot_sound_effect_screenlocal(\"land\")
    
    $Camera.position = Vector2(0, 0)
    $Camera.global_position.x = round($Camera.global_position.x)
    $Camera.global_position.y = round($Camera.global_position.y)
    $PlayerSprite.position = Vector2(0, 0)
    $PlayerSprite.global_position.x = round($PlayerSprite.global_position.x)
    $PlayerSprite.global_position.y = round($PlayerSprite.global_position.y)
    
    if fire > 0:
        fire -= delta
        fire -= min(velocity.length_squared()/1500, 15)*delta
        $PlayerSprite/FlameSprite/Light.energy = sqrt(fire/max_fire)
        $PlayerSprite/FlameSprite.visible = true
        life = max_life
        if fire <= 0:
            Manager.play_oneshot_sound_effect(\"torchgoesout\", global_position)
    else:
        $PlayerSprite/FlameSprite/Light.energy = 0
        $PlayerSprite/FlameSprite.visible = false
        life -= delta
    
    Manager.set_danger(life/max_life)
    $Camera/Fire.value = fire/max_fire*100
    
    $PlayerSprite/Particles.emitting = fire > 0
    $PlayerSprite/Particles.lifetime = max(0.01, max(0, fire)/max_fire)
    $PlayerSprite/Particles.modulate.a = lerp($PlayerSprite/Particles.modulate.a, sqrt(sqrt(max(0, fire)/max_fire)), 0.1)
    $PlayerSprite/Particles.direction = Vector2(velocity.x * look_direction, velocity.y*0.5).normalized()
    $PlayerSprite/Particles.initial_velocity = velocity.length()*0.5
    
    if !is_on_floor():# and !was_on_ground_last_frame:
        $PlayerSprite/Anim.current_animation = \"jump\"
    elif abs(velocity.x) > 1 or walk_state != 0:
        if $PlayerSprite/Anim.current_animation != \"walk\":
            $PlayerSprite/Anim.current_animation_position
        $PlayerSprite/Anim.current_animation = \"walk\"
    else:
        $PlayerSprite/Anim.current_animation = \"stand\"
    
    if damage_cooldown > 0:
        damage_cooldown -= delta
    if movement_damage_cooldown > 0:
        movement_damage_cooldown -= delta
    
    if is_on_floor():
        movement_damage_cooldown = 0
    
    if damage_cooldown <= 0 and num_damage_bodies_in > 0:
        if damage_cooldown <= 0:
            do_damage()

func _on_FlameExtinguishArea_body_entered(body):
    if fire > 0:
        Manager.play_oneshot_sound_effect(\"torchgoesout\", global_position)
    fire = 0
    pass # Replace with function body.

func defer_cleanup_splash(effect : Node):
    yield(get_tree().create_timer(1), \"timeout\")
    remove_child(effect)

func _on_WaterDepthTrick_body_entered(body):
    var effect = preload(\"res://Objects/Splash.tscn\").instance()
    effect.emitting = true
    effect.one_shot = true
    add_child(effect)
    defer_cleanup_splash(effect)
    Manager.play_oneshot_sound_effect(\"splash\", global_position)
    z_index = 0
    $PlayerSprite/Particles.z_index = 0
    in_water = true


func _on_WaterDepthTrick_body_exited(body):
    z_index = 10
    $PlayerSprite/Particles.z_index = -1
    in_water = false

func do_damage():
    if fire > 0:
        fire -= max_fire/4
    else:
        life -= max_life/2
    Manager.play_oneshot_sound_effect(\"hurt\", global_position)
    damage_cooldown = damage_cooldown_max
    movement_damage_cooldown = movement_damage_cooldown_max
    velocity = (-velocity + Vector2(-look_direction*20, -50)).normalized()*150
    velocity.x = clamp(velocity.x, -topspeed, topspeed)

func _on_Death_body_entered(body):
    num_damage_bodies_in += 1
    if damage_cooldown <= 0:
        do_damage()

func _on_Death_body_exited(body):
    num_damage_bodies_in -= 1
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 3, 0.5 )

[sub_resource type="Animation" id=3]
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ 0, 1 ]
}

[sub_resource type="Animation" id=4]
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 3 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("FlameSprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=5]
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("FlameSprite:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=6]
length = 0.4
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 1, 0, 2, 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("FlameSprite:position")
tracks/1/interp = 0
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 0, 1 ),
"update": 1,
"values": [ Vector2( 0, -1 ), Vector2( 0, 0 ), Vector2( 0, -1 ), Vector2( 0, 0 ) ]
}

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 3, 6 )

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 2.5, 6.5 )

[sub_resource type="CircleShape2D" id=9]
radius = 2.5

[sub_resource type="ConvexPolygonShape2D" id=10]
points = PoolVector2Array( -1, -7, 1, -7, 3, -5, 3, 0, 2, 8, -2, 8, -3, 0, -3, -5 )

[sub_resource type="StyleBoxFlat" id=11]
bg_color = Color( 0.901961, 0.431373, 0.32549, 1 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 0, 0, 0, 0 )
anti_aliasing = false

[sub_resource type="StyleBoxFlat" id=12]
bg_color = Color( 0.231373, 0.231373, 0.231373, 0.333333 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 0, 0, 0, 0.396078 )
corner_radius_top_left = 2
corner_radius_top_right = 2
corner_radius_bottom_right = 1
corner_radius_bottom_left = 1
corner_detail = 1
anti_aliasing = false

[node name="MyChar" type="KinematicBody2D" groups=[
"Player",
]]
z_index = 10
collision_mask = 2
script = SubResource( 1 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 320, 180 )
usage = 0
render_direct_to_screen = true

[node name="PlayerSprite" type="Sprite" parent="."]
light_mask = 0
texture = ExtResource( 1 )
offset = Vector2( 0, -4 )
hframes = 4

[node name="Particles" parent="PlayerSprite" instance=ExtResource( 4 )]

[node name="FlameSprite" type="Sprite" parent="PlayerSprite"]
light_mask = 0
texture = ExtResource( 2 )
hframes = 2

[node name="FlameExtinguishArea" type="Area2D" parent="PlayerSprite/FlameSprite"]
position = Vector2( 3, -1.5 )
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerSprite/FlameSprite/FlameExtinguishArea"]
visible = false
position = Vector2( 0, 0.5 )
shape = SubResource( 2 )

[node name="Light" type="Light2D" parent="PlayerSprite/FlameSprite"]
position = Vector2( 2, -1 )
texture = ExtResource( 3 )
offset = Vector2( 4, 0 )
texture_scale = 4.0
color = Color( 1, 0.839216, 0.803922, 1 )
shadow_enabled = true
shadow_buffer_size = 128
shadow_filter = 1
shadow_filter_smooth = 1.0

[node name="Anim" type="AnimationPlayer" parent="PlayerSprite/FlameSprite"]
autoplay = "normal"
anims/normal = SubResource( 3 )

[node name="Anim" type="AnimationPlayer" parent="PlayerSprite"]
autoplay = "stand"
anims/jump = SubResource( 4 )
anims/stand = SubResource( 5 )
anims/walk = SubResource( 6 )

[node name="WaterDepthTrick" type="Area2D" parent="PlayerSprite"]
collision_layer = 0
collision_mask = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerSprite/WaterDepthTrick"]
visible = false
shape = SubResource( 7 )

[node name="Death" type="Area2D" parent="PlayerSprite"]
collision_layer = 0
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerSprite/Death"]
visible = false
position = Vector2( 0, 1 )
shape = SubResource( 8 )

[node name="CollisionShape2D2" type="CollisionShape2D" parent="PlayerSprite/Death"]
visible = false
position = Vector2( 0, -4 )
shape = SubResource( 9 )

[node name="Hull" type="CollisionShape2D" parent="."]
shape = SubResource( 10 )

[node name="Camera" type="Camera2D" parent="."]
z_index = 4096
z_as_relative = false
current = true

[node name="Fire" type="ProgressBar" parent="Camera"]
light_mask = 0
margin_left = 128.0
margin_right = 192.0
margin_bottom = 8.0
rect_rotation = -90.0
custom_styles/fg = SubResource( 11 )
custom_styles/bg = SubResource( 12 )
rounded = true
percent_visible = false
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="body_entered" from="PlayerSprite/FlameSprite/FlameExtinguishArea" to="." method="_on_FlameExtinguishArea_body_entered"]
[connection signal="body_entered" from="PlayerSprite/WaterDepthTrick" to="." method="_on_WaterDepthTrick_body_entered"]
[connection signal="body_exited" from="PlayerSprite/WaterDepthTrick" to="." method="_on_WaterDepthTrick_body_exited"]
[connection signal="body_entered" from="PlayerSprite/Death" to="." method="_on_Death_body_entered"]
[connection signal="body_exited" from="PlayerSprite/Death" to="." method="_on_Death_body_exited"]
